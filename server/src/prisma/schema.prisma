// Prisma Schema for Moodlet
// This file defines your database schema and generates the Prisma Client

// Database connection configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma Client generator
generator client {
  provider = "prisma-client-js"
}

enum ElementType {
  NOTE
  TODO
  IMAGE
  PDF
  LINK
  COMMENT_PIN
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}

// TODO: Define your enums here (ElementType, Role, etc.)
model User {
  id            String   @id @default(uuid())
  name          String 
  email         String   @unique
  password      String 
  profileAvatar String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  ownedBoards    Board[]
  collaborations BoardCollaborator[]
  comments       Comment[]
}


model Board {
  id          String   @id @default(uuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  owner         User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators BoardCollaborator[]
  elements      Element[]
  comments      Comment[]

  @@index([ownerId])
  @@map("boards")
}


model Element {
  id         String      @id @default(uuid())
  boardId    String
  type       ElementType
  position_x Float
  position_y Float
  width      Float
  height     Float
  data       Json
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relationships
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@index([boardId])
  @@map("elements")
}


model Comment {
id                String   @id @default(uuid())
content           String
userId            String
boardId           String
parentCommentId   String?
resolved          Boolean       @default(false)
createdAt   DateTime @default(now())
updatedAt   DateTime @updatedAt

// Relationships
user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
board         Board                 @relation(fields: [boardId], references: [id], onDelete: Cascade)
parent        Comment?              @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
replies       Comment[]             @relation("CommentReplies")

@@index([boardId])
@@index([userId])
@@index([parentCommentId])
@@map("comments")

}


model BoardCollaborator {
  id    String          @id @default(uuid())
  userId        String
  boardId       String
  role          Role
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

// Relationships
user            User            @relation(fields: [userId], references: [id], onDelete: Cascade) 
board           Board           @relation(fields: [boardId], references: [id], onDelete: Cascade) 

@@unique([userId, boardId])

@@index([boardId])
@@index([userId])
@@map("board_collaborators")


}